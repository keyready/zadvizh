package main

import (
	"bot/botdb"
	"context"
	"encoding/base64"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
	"strconv"
)

func main() {
	mongoClient, _ := botdb.GetMongoClient()

	bot, botInitErr := tgbotapi.NewBotAPI(os.Getenv("BOT_TOKEN"))
	if botInitErr != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %s", botInitErr.Error())
	}

	log.Printf("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–º–µ–Ω–µ–º %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			log.Print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
			continue
		}

		if len(update.Message.NewChatMembers) > 0 {
			authorRefTgId := strconv.FormatInt(update.Message.From.ID, 64)
			newMemberTgId := strconv.FormatInt(update.Message.NewChatMembers[0].ID, 64)

			mongoClient.Database(os.Getenv("MONGO_APP_NAME")).
				Collection("employees").
				InsertOne(context.Background(),
					botdb.Employee{
						TgId: newMemberTgId,
						Ref:  authorRefTgId,
					},
				)

			newMember := update.Message.NewChatMembers[0]

			welcomeMessage := fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! üôå", newMember.UserName)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeMessage)

			_, sendErr := bot.Send(msg)
			if sendErr != nil {
				log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", sendErr.Error())
			}
		}

		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "invite":
				authorLink := update.Message.From.ID
				authorLinkB64 := base64.StdEncoding.EncodeToString([]byte(strconv.FormatInt(authorLink, 10)))
				inviteLink := os.Getenv("LINK_TEMPLATE") + authorLinkB64

				msgBody := fmt.Sprintf("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: %s", inviteLink)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgBody)

				_, err := bot.Send(msg)
				if err != nil {
					log.Fatalf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /invite: %s", err.Error())
				}

				log.Print("–°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
			default:
				log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s", update.Message.Command())
			}
		}

	}
}
